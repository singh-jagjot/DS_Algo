class Solution {
    public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
        int mod = (int) 1e9 + 7;
        int[] clone = nums1.clone();
        Arrays.sort(clone);

        int maxDiff = Integer.MIN_VALUE;
        int pos = -1;
        int replacement = 0;
        for (int i = 0; i < nums1.length; i++) {
            int origAbs = Math.abs(nums1[i] - nums2[i]);
            int potentialRep = getLowerBoundIdx(clone, nums2[i]);
            int newAbs = Math.abs(potentialRep - nums2[i]);
            int diff = origAbs - newAbs;
            if (maxDiff < diff) {
                maxDiff = diff;
                pos = i;
                replacement = potentialRep;
            }
        }

        if (pos != -1) {
            nums1[pos] = replacement;
        }

        int ads = 0;

        for (int i = 0; i < nums1.length; i++) {
            ads = (ads + Math.abs(nums1[i] - nums2[i])) % mod;
        }
        return ads;
    }

    public int getLowerBoundIdx(int[] arr, int key) {
        int left = 0;
        int right = arr.length - 1;
        int mid;
        if (key <= arr[left]) {
            return arr[left];
        } else if (key >= arr[right]) {
            return arr[right];
        } else {
            while (left <= right) {
                mid = (left + right) / 2;
                int midVal = arr[mid];
                if (midVal < key) {
                    left = mid + 1;
                } else if (midVal > key) {
                    right = mid - 1;
                } else {
                    return arr[mid];
                }
            }
        }
        return Math.abs(arr[left - 1] - key) <= Math.abs(arr[left] - key) ? arr[left - 1] : arr[left];
    }
}